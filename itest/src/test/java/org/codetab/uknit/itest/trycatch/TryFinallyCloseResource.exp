package org.codetab.uknit.itest.trycatch;

import java.io.BufferedReader;
import java.io.IOException;
import javax.inject.Inject;

public class TryFinallyCloseResourceTest {
    @InjectMocks
    private TryFinallyCloseResource tryFinallyCloseResource;

    @Mock
    private Logger log;

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testTryFinallyCloseResourceTryTryIfBr() throws Exception {
        Io io = Mockito.mock(Io.class);
        BufferedReader br = Mockito.mock(BufferedReader.class);
        String line = "Foo";
        IOException e = Mockito.mock(IOException.class);
        String kiwi = "Bar";
        IOException e = Mockito.mock(IOException.class);
        String cherry = "Baz";

        when(io.bufferedFileReader("foo.txt")).thenReturn(br);
        when(br.readLine()).thenReturn(line);
        tryFinallyCloseResource.tryFinallyCloseResource(io);

        verify(log).debug("Entering try block");
        verify(log).debug("Line =>" + line);
        verify(e, never()).getMessage();
        verify(log, never()).debug("IOException in try block =>" + kiwi);
        verify(log).debug("Entering finally block");
        verify(br).close();
        verify(e, never()).getMessage();
        verify(log, never()).debug("IOException in finally block =>" + cherry);
    }

    @Test
    public void testTryFinallyCloseResourceTryTryElseBr() throws Exception {
        Io io = Mockito.mock(Io.class);
        BufferedReader br = Mockito.mock(BufferedReader.class);
        String line = "Foo";
        IOException e = Mockito.mock(IOException.class);
        String kiwi = "Bar";
        IOException e = Mockito.mock(IOException.class);
        String cherry = "Baz";

        when(io.bufferedFileReader("foo.txt")).thenReturn(br);
        when(br.readLine()).thenReturn(line);
        tryFinallyCloseResource.tryFinallyCloseResource(io);

        verify(log).debug("Entering try block");
        verify(log).debug("Line =>" + line);
        verify(e, never()).getMessage();
        verify(log, never()).debug("IOException in try block =>" + kiwi);
        verify(log).debug("Entering finally block");
        verify(br, never()).close();
        verify(e, never()).getMessage();
        verify(log, never()).debug("IOException in finally block =>" + cherry);
    }

    @Test
    public void testTryFinallyCloseResourceTryTryCatchIOException() throws Exception {
        Io io = Mockito.mock(Io.class);
        BufferedReader br = Mockito.mock(BufferedReader.class);
        String line = "Foo";
        IOException e = Mockito.mock(IOException.class);
        String kiwi = "Bar";
        IOException e = Mockito.mock(IOException.class);
        String cherry = "Baz";

        when(io.bufferedFileReader("foo.txt")).thenReturn(br);
        when(br.readLine()).thenReturn(line);
        when(e.getMessage()).thenReturn(cherry);
        tryFinallyCloseResource.tryFinallyCloseResource(io);

        verify(log).debug("Entering try block");
        verify(log).debug("Line =>" + line);
        verify(e, never()).getMessage();
        verify(log, never()).debug("IOException in try block =>" + kiwi);
        verify(log).debug("Entering finally block");
        verify(br, never()).close();
        verify(log).debug("IOException in finally block =>" + cherry);
    }

    @Test
    public void testTryFinallyCloseResourceTryCatchIOExceptionTry() throws Exception {
        Io io = Mockito.mock(Io.class);
        BufferedReader br = Mockito.mock(BufferedReader.class);
        String line = "Foo";
        IOException e = Mockito.mock(IOException.class);
        String kiwi = "Bar";
        IOException e = Mockito.mock(IOException.class);
        String cherry = "Baz";

        when(io.bufferedFileReader("foo.txt")).thenReturn(br);
        when(br.readLine()).thenReturn(line);
        when(e.getMessage()).thenReturn(kiwi);
        tryFinallyCloseResource.tryFinallyCloseResource(io);

        verify(log).debug("Entering try block");
        verify(log, never()).debug("Line =>" + line);
        verify(log).debug("IOException in try block =>" + kiwi);
        verify(log).debug("Entering finally block");
        verify(br).close();
        verify(e, never()).getMessage();
        verify(log, never()).debug("IOException in finally block =>" + cherry);
    }
}
