package org.codetab.uknit.itest.reassign;

import org.codetab.uknit.itest.reassign.Model.Foo;

public class VarTest {
    @InjectMocks
    private Var var;

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testDefineAndAssign() {
        Foo foo = Mockito.mock(Foo.class);
        int index = 1;
        String x = "Foo";

        when(foo.get(index)).thenReturn(x);

        String actual = var.defineAndAssign(foo);

        assertEquals(x, actual);
    }

    @Test
    public void testReassignBeforeVarUse() {
        Foo foo = Mockito.mock(Foo.class);
        int index2 = 2;
        String y = "Foo";

        when(foo.get(index2)).thenReturn(y);

        String actual = var.reassignBeforeVarUse(foo);

        assertEquals(y, actual);
    }

    @Test
    public void testReassignAfterVarUse() {
        Foo foo = Mockito.mock(Foo.class);
        int index = 1;
        String x = "Foo";
        int index2 = 2;
        String y = "Bar";
        String apple = x + y;

        when(foo.get(index)).thenReturn(x);
        when(foo.get(index2)).thenReturn(y);

        String actual = var.reassignAfterVarUse(foo);

        assertEquals(apple, actual);
    }

    @Test
    public void testReassignNameVarConflicts() {
        Foo foo = Mockito.mock(Foo.class);
        int index = 1;
        String x = "Foo";
        int index3 = 2;
        String y = "Bar";
        String apple = x + y;

        when(foo.get(index)).thenReturn(x);
        when(foo.get(index3)).thenReturn(y);

        String actual = var.reassignNameVarConflicts(foo);

        assertEquals(apple, actual);
    }
}
