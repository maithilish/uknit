package org.codetab.uknit.itest.ctlflow.ifelse.when;

import org.codetab.uknit.itest.model.Duck;

public class IfElseIfTest {
    @InjectMocks
    private IfElseIf ifElseIf;

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testIfElseIfIfCanSwim() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("if")).thenReturn(state);

        String actual = ifElseIf.ifElseIf(duck, canSwim, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck, never()).swim("else if");
        verify(duck, never()).fly("else if");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfElseCanSwimIfelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("else if")).thenReturn(state);

        String actual = ifElseIf.ifElseIf(duck, canSwim, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck).swim("else if");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfElseCanSwimElseelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean done = true;
        String state = "Foo";

        String actual = ifElseIf.ifElseIf(duck, canSwim, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck, never()).swim("else if");
        verify(duck, never()).fly("else if");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfElseIfCanSwim() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("if")).thenReturn(state);

        String actual = ifElseIf.ifElseIfElse(duck, canSwim, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck, never()).swim("else if");
        verify(duck, never()).fly("else if");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfElseElseCanSwimIfelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("else if")).thenReturn(state);

        String actual = ifElseIf.ifElseIfElse(duck, canSwim, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck).swim("else if");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfElseElseCanSwimElseelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("else")).thenReturn(state);

        String actual = ifElseIf.ifElseIfElse(duck, canSwim, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck, never()).swim("else if");
        verify(duck, never()).fly("else if");
        verify(duck).swim("else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfTwiceElseIfIfCanSwim() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("if")).thenReturn(state);

        String actual = ifElseIf.ifTwiceElseIf(duck, canSwim, canDive, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck, never()).swim("else if once");
        verify(duck, never()).fly("else if once");
        verify(duck, never()).swim("else if twice");
        verify(duck, never()).fly("else if twice");
        verify(duck).swim("end");
    }

    @Test
    public void testIfTwiceElseIfElseCanSwimIfelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("else if once")).thenReturn(state);

        String actual = ifElseIf.ifTwiceElseIf(duck, canSwim, canDive, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck).swim("else if once");
        verify(duck, never()).swim("else if twice");
        verify(duck, never()).fly("else if twice");
        verify(duck).swim("end");
    }

    @Test
    public void testIfTwiceElseIfElseCanSwimElseelseIfelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("else if twice")).thenReturn(state);

        String actual = ifElseIf.ifTwiceElseIf(duck, canSwim, canDive, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck, never()).swim("else if once");
        verify(duck, never()).fly("else if once");
        verify(duck).swim("else if twice");
        verify(duck).swim("end");
    }

    @Test
    public void testIfTwiceElseIfElseCanSwimElseelseElseelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        String state = "Foo";

        String actual = ifElseIf.ifTwiceElseIf(duck, canSwim, canDive, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck, never()).swim("else if once");
        verify(duck, never()).fly("else if once");
        verify(duck, never()).swim("else if twice");
        verify(duck, never()).fly("else if twice");
        verify(duck).swim("end");
    }

    @Test
    public void testIfTwiceElseIfElseIfCanSwim() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("if")).thenReturn(state);

        String actual = ifElseIf.ifTwiceElseIfElse(duck, canSwim, canDive, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck, never()).swim("else if once");
        verify(duck, never()).fly("else if once");
        verify(duck, never()).swim("else if twice");
        verify(duck, never()).fly("else if twice");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfTwiceElseIfElseElseCanSwimIfelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("else if once")).thenReturn(state);

        String actual = ifElseIf.ifTwiceElseIfElse(duck, canSwim, canDive, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck).swim("else if once");
        verify(duck, never()).swim("else if twice");
        verify(duck, never()).fly("else if twice");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfTwiceElseIfElseElseCanSwimElseelseIfelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("else if twice")).thenReturn(state);

        String actual = ifElseIf.ifTwiceElseIfElse(duck, canSwim, canDive, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck, never()).swim("else if once");
        verify(duck, never()).fly("else if once");
        verify(duck).swim("else if twice");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfTwiceElseIfElseElseCanSwimElseelseElseelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("else")).thenReturn(state);

        String actual = ifElseIf.ifTwiceElseIfElse(duck, canSwim, canDive, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck, never()).swim("else if once");
        verify(duck, never()).fly("else if once");
        verify(duck, never()).swim("else if twice");
        verify(duck, never()).fly("else if twice");
        verify(duck).swim("else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfTwiceIfCanSwimIfCanSwim2() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean canSwim2 = true;
        boolean canDive2 = true;
        String state = "Foo";

        when(duck.fly("if")).thenReturn(state);
        when(duck.fly("2 if")).thenReturn(state);

        String actual = ifElseIf.ifElseIfTwice(duck, canSwim, canDive, canSwim2, canDive2);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck, never()).swim("else if once");
        verify(duck, never()).fly("else if once");
        verify(duck).swim("2 if");
        verify(duck, never()).swim("2 else if once");
        verify(duck, never()).fly("2 else if once");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfTwiceIfCanSwimElseCanSwim2Ifelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean canSwim2 = true;
        boolean canDive2 = true;
        String state = "Foo";

        when(duck.fly("if")).thenReturn(state);
        when(duck.fly("2 else if once")).thenReturn(state);

        String actual = ifElseIf.ifElseIfTwice(duck, canSwim, canDive, canSwim2, canDive2);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck, never()).swim("else if once");
        verify(duck, never()).fly("else if once");
        verify(duck, never()).swim("2 if");
        verify(duck, never()).fly("2 if");
        verify(duck).swim("2 else if once");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfTwiceIfCanSwimElseCanSwim2Elseelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean canSwim2 = true;
        boolean canDive2 = true;
        String state = "Foo";

        when(duck.fly("if")).thenReturn(state);

        String actual = ifElseIf.ifElseIfTwice(duck, canSwim, canDive, canSwim2, canDive2);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck, never()).swim("else if once");
        verify(duck, never()).fly("else if once");
        verify(duck, never()).swim("2 if");
        verify(duck, never()).fly("2 if");
        verify(duck, never()).swim("2 else if once");
        verify(duck, never()).fly("2 else if once");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfTwiceElseCanSwimIfelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean canSwim2 = true;
        boolean canDive2 = true;
        String state = "Foo";

        when(duck.fly("else if once")).thenReturn(state);
        when(duck.fly("2 if")).thenReturn(state);

        String actual = ifElseIf.ifElseIfTwice(duck, canSwim, canDive, canSwim2, canDive2);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck).swim("else if once");
        verify(duck).swim("2 if");
        verify(duck, never()).swim("2 else if once");
        verify(duck, never()).fly("2 else if once");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfTwiceElseCanSwimElseelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean canSwim2 = true;
        boolean canDive2 = true;
        String state = "Foo";

        when(duck.fly("2 if")).thenReturn(state);

        String actual = ifElseIf.ifElseIfTwice(duck, canSwim, canDive, canSwim2, canDive2);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck, never()).swim("else if once");
        verify(duck, never()).fly("else if once");
        verify(duck).swim("2 if");
        verify(duck, never()).swim("2 else if once");
        verify(duck, never()).fly("2 else if once");
        verify(duck).swim("end");
    }

    @Test
    public void testIfTwiceElseIfElseTwiceIfCanSwimIfCanSwim2() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        boolean canSwim2 = true;
        boolean canDive2 = true;
        boolean done2 = true;
        String state = "Foo";

        when(duck.fly("if")).thenReturn(state);
        when(duck.fly("2 if")).thenReturn(state);

        String actual = ifElseIf.ifTwiceElseIfElseTwice(duck, canSwim, canDive, done, canSwim2, canDive2, done2);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck, never()).swim("else if once");
        verify(duck, never()).fly("else if once");
        verify(duck, never()).swim("else if twice");
        verify(duck, never()).fly("else if twice");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck).swim("2 if");
        verify(duck, never()).swim("2 else if once");
        verify(duck, never()).fly("2 else if once");
        verify(duck, never()).swim("2 else if twice");
        verify(duck, never()).fly("2 else if twice");
        verify(duck, never()).swim("2 else");
        verify(duck, never()).fly("2 else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfTwiceElseIfElseTwiceIfCanSwimElseCanSwim2Ifelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        boolean canSwim2 = true;
        boolean canDive2 = true;
        boolean done2 = true;
        String state = "Foo";

        when(duck.fly("if")).thenReturn(state);
        when(duck.fly("2 else if once")).thenReturn(state);

        String actual = ifElseIf.ifTwiceElseIfElseTwice(duck, canSwim, canDive, done, canSwim2, canDive2, done2);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck, never()).swim("else if once");
        verify(duck, never()).fly("else if once");
        verify(duck, never()).swim("else if twice");
        verify(duck, never()).fly("else if twice");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck, never()).swim("2 if");
        verify(duck, never()).fly("2 if");
        verify(duck).swim("2 else if once");
        verify(duck, never()).swim("2 else if twice");
        verify(duck, never()).fly("2 else if twice");
        verify(duck, never()).swim("2 else");
        verify(duck, never()).fly("2 else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfTwiceElseIfElseTwiceElseCanSwim2ElseelseIfelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        boolean canSwim2 = true;
        boolean canDive2 = true;
        boolean done2 = true;
        String state = "Foo";

        when(duck.fly("if")).thenReturn(state);
        when(duck.fly("2 else if twice")).thenReturn(state);

        String actual = ifElseIf.ifTwiceElseIfElseTwice(duck, canSwim, canDive, done, canSwim2, canDive2, done2);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck, never()).swim("else if once");
        verify(duck, never()).fly("else if once");
        verify(duck, never()).swim("else if twice");
        verify(duck, never()).fly("else if twice");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck, never()).swim("2 if");
        verify(duck, never()).fly("2 if");
        verify(duck, never()).swim("2 else if once");
        verify(duck, never()).fly("2 else if once");
        verify(duck).swim("2 else if twice");
        verify(duck, never()).swim("2 else");
        verify(duck, never()).fly("2 else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfTwiceElseIfElseTwiceElseCanSwim2ElseelseElseelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        boolean canSwim2 = true;
        boolean canDive2 = true;
        boolean done2 = true;
        String state = "Foo";

        when(duck.fly("if")).thenReturn(state);
        when(duck.fly("2 else")).thenReturn(state);

        String actual = ifElseIf.ifTwiceElseIfElseTwice(duck, canSwim, canDive, done, canSwim2, canDive2, done2);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck, never()).swim("else if once");
        verify(duck, never()).fly("else if once");
        verify(duck, never()).swim("else if twice");
        verify(duck, never()).fly("else if twice");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck, never()).swim("2 if");
        verify(duck, never()).fly("2 if");
        verify(duck, never()).swim("2 else if once");
        verify(duck, never()).fly("2 else if once");
        verify(duck, never()).swim("2 else if twice");
        verify(duck, never()).fly("2 else if twice");
        verify(duck).swim("2 else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfTwiceElseIfElseTwiceElseCanSwimIfelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        boolean canSwim2 = true;
        boolean canDive2 = true;
        boolean done2 = true;
        String state = "Foo";

        when(duck.fly("else if once")).thenReturn(state);
        when(duck.fly("2 if")).thenReturn(state);

        String actual = ifElseIf.ifTwiceElseIfElseTwice(duck, canSwim, canDive, done, canSwim2, canDive2, done2);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck).swim("else if once");
        verify(duck, never()).swim("else if twice");
        verify(duck, never()).fly("else if twice");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck).swim("2 if");
        verify(duck, never()).swim("2 else if once");
        verify(duck, never()).fly("2 else if once");
        verify(duck, never()).swim("2 else if twice");
        verify(duck, never()).fly("2 else if twice");
        verify(duck, never()).swim("2 else");
        verify(duck, never()).fly("2 else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfTwiceElseIfElseTwiceElseCanSwimElseelseIfelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        boolean canSwim2 = true;
        boolean canDive2 = true;
        boolean done2 = true;
        String state = "Foo";

        when(duck.fly("else if twice")).thenReturn(state);
        when(duck.fly("2 if")).thenReturn(state);

        String actual = ifElseIf.ifTwiceElseIfElseTwice(duck, canSwim, canDive, done, canSwim2, canDive2, done2);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck, never()).swim("else if once");
        verify(duck, never()).fly("else if once");
        verify(duck).swim("else if twice");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck).swim("2 if");
        verify(duck, never()).swim("2 else if once");
        verify(duck, never()).fly("2 else if once");
        verify(duck, never()).swim("2 else if twice");
        verify(duck, never()).fly("2 else if twice");
        verify(duck, never()).swim("2 else");
        verify(duck, never()).fly("2 else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfTwiceElseIfElseTwiceElseCanSwimElseelseElseelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        boolean canSwim2 = true;
        boolean canDive2 = true;
        boolean done2 = true;
        String state = "Foo";

        when(duck.fly("else")).thenReturn(state);
        when(duck.fly("2 if")).thenReturn(state);

        String actual = ifElseIf.ifTwiceElseIfElseTwice(duck, canSwim, canDive, done, canSwim2, canDive2, done2);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck, never()).swim("else if once");
        verify(duck, never()).fly("else if once");
        verify(duck, never()).swim("else if twice");
        verify(duck, never()).fly("else if twice");
        verify(duck).swim("else");
        verify(duck).swim("2 if");
        verify(duck, never()).swim("2 else if once");
        verify(duck, never()).fly("2 else if once");
        verify(duck, never()).swim("2 else if twice");
        verify(duck, never()).fly("2 else if twice");
        verify(duck, never()).swim("2 else");
        verify(duck, never()).fly("2 else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfPlusIfIfCanSwimIfDone() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("if")).thenReturn(state);
        when(duck.fly("plus if")).thenReturn(state);

        String actual = ifElseIf.ifElseIfPlusIf(duck, canSwim, canDive, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck, never()).swim("else if");
        verify(duck, never()).fly("else if");
        verify(duck).swim("plus if");
        verify(duck, never()).swim("plus else");
        verify(duck, never()).fly("plus else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfPlusIfIfCanSwimElseDone() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("if")).thenReturn(state);
        when(duck.fly("plus else")).thenReturn(state);

        String actual = ifElseIf.ifElseIfPlusIf(duck, canSwim, canDive, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck, never()).swim("else if");
        verify(duck, never()).fly("else if");
        verify(duck, never()).swim("plus if");
        verify(duck, never()).fly("plus if");
        verify(duck).swim("plus else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfPlusIfElseCanSwimIfelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("else if")).thenReturn(state);
        when(duck.fly("plus if")).thenReturn(state);

        String actual = ifElseIf.ifElseIfPlusIf(duck, canSwim, canDive, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck).swim("else if");
        verify(duck).swim("plus if");
        verify(duck, never()).swim("plus else");
        verify(duck, never()).fly("plus else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfPlusIfElseCanSwimElseelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("plus if")).thenReturn(state);

        String actual = ifElseIf.ifElseIfPlusIf(duck, canSwim, canDive, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck, never()).swim("else if");
        verify(duck, never()).fly("else if");
        verify(duck).swim("plus if");
        verify(duck, never()).swim("plus else");
        verify(duck, never()).fly("plus else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfElsePlusIfIfCanSwimIfDone() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("if")).thenReturn(state);
        when(duck.fly("plus if")).thenReturn(state);

        String actual = ifElseIf.ifElseIfElsePlusIf(duck, canSwim, canDive, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck, never()).swim("else if");
        verify(duck, never()).fly("else if");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck).swim("plus if");
        verify(duck, never()).swim("plus else");
        verify(duck, never()).fly("plus else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfElsePlusIfIfCanSwimElseDone() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("if")).thenReturn(state);
        when(duck.fly("plus else")).thenReturn(state);

        String actual = ifElseIf.ifElseIfElsePlusIf(duck, canSwim, canDive, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck, never()).swim("else if");
        verify(duck, never()).fly("else if");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck, never()).swim("plus if");
        verify(duck, never()).fly("plus if");
        verify(duck).swim("plus else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfElsePlusIfElseCanSwimIfelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("else if")).thenReturn(state);
        when(duck.fly("plus if")).thenReturn(state);

        String actual = ifElseIf.ifElseIfElsePlusIf(duck, canSwim, canDive, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck).swim("else if");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck).swim("plus if");
        verify(duck, never()).swim("plus else");
        verify(duck, never()).fly("plus else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfElsePlusIfElseCanSwimElseelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("else")).thenReturn(state);
        when(duck.fly("plus if")).thenReturn(state);

        String actual = ifElseIf.ifElseIfElsePlusIf(duck, canSwim, canDive, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck, never()).swim("else if");
        verify(duck, never()).fly("else if");
        verify(duck).swim("else");
        verify(duck).swim("plus if");
        verify(duck, never()).swim("plus else");
        verify(duck, never()).fly("plus else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfPlusIfIfCanSwimIfDone2() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean canFlip = true;
        boolean canFly = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("if")).thenReturn(state);
        when(duck.fly("plus if")).thenReturn(state);

        String actual = ifElseIf.ifElseIfPlusIf(duck, canSwim, canDive, canFlip, canFly, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck, never()).swim("else if");
        verify(duck, never()).fly("else if");
        verify(duck, never()).swim("else if if");
        verify(duck, never()).fly("else if if");
        verify(duck, never()).swim("else if else");
        verify(duck, never()).fly("else if else");
        verify(duck).swim("plus if");
        verify(duck, never()).swim("plus else");
        verify(duck, never()).fly("plus else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfPlusIfIfCanSwimElseDone2() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean canFlip = true;
        boolean canFly = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("if")).thenReturn(state);
        when(duck.fly("plus else")).thenReturn(state);

        String actual = ifElseIf.ifElseIfPlusIf(duck, canSwim, canDive, canFlip, canFly, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck, never()).swim("else if");
        verify(duck, never()).fly("else if");
        verify(duck, never()).swim("else if if");
        verify(duck, never()).fly("else if if");
        verify(duck, never()).swim("else if else");
        verify(duck, never()).fly("else if else");
        verify(duck, never()).swim("plus if");
        verify(duck, never()).fly("plus if");
        verify(duck).swim("plus else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfPlusIfElseCanSwimIfelseIfCanFlip() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean canFlip = true;
        boolean canFly = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("else if")).thenReturn(state);
        when(duck.fly("else if if")).thenReturn(state);
        when(duck.fly("plus if")).thenReturn(state);

        String actual = ifElseIf.ifElseIfPlusIf(duck, canSwim, canDive, canFlip, canFly, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck).swim("else if");
        verify(duck).swim("else if if");
        verify(duck, never()).swim("else if else");
        verify(duck, never()).fly("else if else");
        verify(duck).swim("plus if");
        verify(duck, never()).swim("plus else");
        verify(duck, never()).fly("plus else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfPlusIfIfelseElseCanFlipIfelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean canFlip = true;
        boolean canFly = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("else if")).thenReturn(state);
        when(duck.fly("else if else")).thenReturn(state);
        when(duck.fly("plus if")).thenReturn(state);

        String actual = ifElseIf.ifElseIfPlusIf(duck, canSwim, canDive, canFlip, canFly, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck).swim("else if");
        verify(duck, never()).swim("else if if");
        verify(duck, never()).fly("else if if");
        verify(duck).swim("else if else");
        verify(duck).swim("plus if");
        verify(duck, never()).swim("plus else");
        verify(duck, never()).fly("plus else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfPlusIfIfelseElseCanFlipElseelse() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean canFlip = true;
        boolean canFly = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("else if")).thenReturn(state);
        when(duck.fly("plus if")).thenReturn(state);

        String actual = ifElseIf.ifElseIfPlusIf(duck, canSwim, canDive, canFlip, canFly, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck).swim("else if");
        verify(duck, never()).swim("else if if");
        verify(duck, never()).fly("else if if");
        verify(duck, never()).swim("else if else");
        verify(duck, never()).fly("else if else");
        verify(duck).swim("plus if");
        verify(duck, never()).swim("plus else");
        verify(duck, never()).fly("plus else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfElseIfPlusIfElseCanSwimElseelse2() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean canDive = true;
        boolean canFlip = true;
        boolean canFly = true;
        boolean done = true;
        String state = "Foo";

        when(duck.fly("plus if")).thenReturn(state);

        String actual = ifElseIf.ifElseIfPlusIf(duck, canSwim, canDive, canFlip, canFly, done);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck, never()).swim("else if");
        verify(duck, never()).fly("else if");
        verify(duck, never()).swim("else if if");
        verify(duck, never()).fly("else if if");
        verify(duck, never()).swim("else if else");
        verify(duck, never()).fly("else if else");
        verify(duck).swim("plus if");
        verify(duck, never()).swim("plus else");
        verify(duck, never()).fly("plus else");
        verify(duck).swim("end");
    }
}
