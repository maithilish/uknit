package org.codetab.uknit.itest.ctlflow.ifelse.when;

import org.codetab.uknit.itest.model.Duck;

public class IfTryTest {
    @InjectMocks
    private IfTry ifTry;

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testIfTryFooIfCanSwimTry() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String state = "Foo";

        when(duck.fly("if")).thenReturn(state);
        when(duck.fly("if try")).thenReturn(state);
        when(duck.fly("if finally")).thenReturn(state);

        String actual = ifTry.ifTryFoo(duck, canSwim);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck).swim("if try");
        verify(duck, never()).swim("if catch");
        verify(duck, never()).fly("if catch");
        verify(duck).swim("if finally");
        verify(duck).swim("end");
    }

    @Test
    public void testIfTryFooIfCanSwimTryCatchIllegalStateException() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String state = "Foo";

        when(duck.fly("if")).thenReturn(state);
        when(duck.fly("if try")).thenReturn(state);
        when(duck.fly("if catch")).thenReturn(state);
        when(duck.fly("if finally")).thenReturn(state);

        String actual = ifTry.ifTryFoo(duck, canSwim);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck).swim("if try");
        verify(duck).swim("if catch");
        verify(duck).swim("if finally");
        verify(duck).swim("end");
    }

    @Test
    public void testIfTryFooElseCanSwimTry() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String state = "Foo";

        when(duck.fly("else")).thenReturn(state);
        when(duck.fly("if try")).thenReturn(state);
        when(duck.fly("if finally")).thenReturn(state);

        String actual = ifTry.ifTryFoo(duck, canSwim);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck).swim("else");
        verify(duck).swim("if try");
        verify(duck, never()).swim("if catch");
        verify(duck, never()).fly("if catch");
        verify(duck).swim("if finally");
        verify(duck).swim("end");
    }

    @Test
    public void testTryIfFooTryIfCanSwim() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String state = "Foo";

        when(duck.fly("if try")).thenReturn(state);
        when(duck.fly("if finally")).thenReturn(state);
        when(duck.fly("if")).thenReturn(state);

        String actual = ifTry.tryIfFoo(duck, canSwim);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if try");
        verify(duck, never()).swim("if catch");
        verify(duck, never()).fly("if catch");
        verify(duck).swim("if finally");
        verify(duck).swim("if");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck).swim("end");
    }

    @Test
    public void testTryIfFooTryElseCanSwim() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String state = "Foo";

        when(duck.fly("if try")).thenReturn(state);
        when(duck.fly("if finally")).thenReturn(state);
        when(duck.fly("else")).thenReturn(state);

        String actual = ifTry.tryIfFoo(duck, canSwim);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if try");
        verify(duck, never()).swim("if catch");
        verify(duck, never()).fly("if catch");
        verify(duck).swim("if finally");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck).swim("else");
        verify(duck).swim("end");
    }

    @Test
    public void testTryIfFooTryCatchIllegalStateException() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String state = "Foo";

        when(duck.fly("if try")).thenReturn(state);
        when(duck.fly("if catch")).thenReturn(state);
        when(duck.fly("if finally")).thenReturn(state);
        when(duck.fly("if")).thenReturn(state);

        String actual = ifTry.tryIfFoo(duck, canSwim);

        assertEquals(state, actual);
        verify(duck).swim("start");
        verify(duck).swim("if try");
        verify(duck).swim("if catch");
        verify(duck).swim("if finally");
        verify(duck).swim("if");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfTryNoAssignFooIfCanSwimTry() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = ifTry.ifTryNoAssignFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck).fly("if");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck).swim("if try");
        verify(duck).fly("if try");
        verify(duck, never()).swim("if catch");
        verify(duck, never()).fly("if catch");
        verify(duck).swim("if finally");
        verify(duck).fly("if finally");
        verify(duck).swim("end");
    }

    @Test
    public void testIfTryNoAssignFooIfCanSwimTryCatchIllegalStateException() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = ifTry.ifTryNoAssignFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck).fly("if");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck).swim("if try");
        verify(duck).fly("if try");
        verify(duck).swim("if catch");
        verify(duck).fly("if catch");
        verify(duck).swim("if finally");
        verify(duck).fly("if finally");
        verify(duck).swim("end");
    }

    @Test
    public void testIfTryNoAssignFooElseCanSwimTry() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = ifTry.ifTryNoAssignFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck).swim("else");
        verify(duck).fly("else");
        verify(duck).swim("if try");
        verify(duck).fly("if try");
        verify(duck, never()).swim("if catch");
        verify(duck, never()).fly("if catch");
        verify(duck).swim("if finally");
        verify(duck).fly("if finally");
        verify(duck).swim("end");
    }

    @Test
    public void testTryIfNoAssignFooTryIfCanSwim() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = ifTry.tryIfNoAssignFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("if try");
        verify(duck).fly("if try");
        verify(duck, never()).swim("if catch");
        verify(duck, never()).fly("if catch");
        verify(duck).swim("if finally");
        verify(duck).fly("if finally");
        verify(duck).swim("if");
        verify(duck).fly("if");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck).swim("end");
    }

    @Test
    public void testTryIfNoAssignFooTryElseCanSwim() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = ifTry.tryIfNoAssignFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("if try");
        verify(duck).fly("if try");
        verify(duck, never()).swim("if catch");
        verify(duck, never()).fly("if catch");
        verify(duck).swim("if finally");
        verify(duck).fly("if finally");
        verify(duck, never()).swim("if");
        verify(duck, never()).fly("if");
        verify(duck).swim("else");
        verify(duck).fly("else");
        verify(duck).swim("end");
    }

    @Test
    public void testTryIfNoAssignFooTryCatchIllegalStateException() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = ifTry.tryIfNoAssignFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("if try");
        verify(duck).fly("if try");
        verify(duck).swim("if catch");
        verify(duck).fly("if catch");
        verify(duck).swim("if finally");
        verify(duck).fly("if finally");
        verify(duck).swim("if");
        verify(duck).fly("if");
        verify(duck, never()).swim("else");
        verify(duck, never()).fly("else");
        verify(duck).swim("end");
    }
}
