package org.codetab.uknit.itest.flow.nosplit;

import java.util.List;

public class ForEachTest {
    @InjectMocks
    private ForEach forEach;

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testBasicFor() {
        List<YmlNode> itemList = new ArrayList<>();
        int i = 0;
        YmlNode item = Mockito.mock(YmlNode.class);
        forEach.basicFor(itemList);

        verify(item).put("order", i);
    }

    @Test
    public void testBasicForAssign() {
        List<YmlNode> itemList = new ArrayList<>();
        int i = 1;
        YmlNode item = Mockito.mock(YmlNode.class);
        forEach.basicForAssign(itemList);

        verify(item).put("order", i);
    }

    @Test
    public void testEnhancedFor() {
        List<YmlNode> itemsList = new ArrayList<>();
        YmlNode items = Mockito.mock(YmlNode.class);
        List<YmlNode> itemList = new ArrayList<>();
        YmlNode item = Mockito.mock(YmlNode.class);

        when(items.findValues("item")).thenReturn(itemList);
        forEach.enhancedFor(itemsList);

        verify(item).put("order", 1);
    }

    @Test
    public void testCombined() {
        List<YmlNode> itemsList = new ArrayList<>();
        YmlNode items = Mockito.mock(YmlNode.class);
        List<YmlNode> itemList = new ArrayList<>();
        int i = 0;
        YmlNode item = Mockito.mock(YmlNode.class);

        when(items.findValues("item")).thenReturn(itemList);
        forEach.combined(itemsList);

        verify(item).put("order", i);
    }
}
