
uknit.source.base=${user.dir}
uknit.source.dir=src/main/java
uknit.source.package=org.codetab.uknit.itest.example
uknit.source.clz=Example.java

#uknit.dest=<no default>

uknit.dump.method=false
uknit.mode.dev=false


uknit.profile.test.framework=junit5

uknit.detect.getterSetter=true

# ignore method
uknit.ignore.method.main=true
uknit.ignore.method.constructor=true
uknit.ignore.method.private=true

# preferred instance create statements
uknit.createInstance.List=new ArrayList<>()
uknit.createInstance.Map=new HashMap<>()
uknit.createInstance.Set=new HashSet<>()
uknit.createInstance.Collection=new ArrayList<>()
uknit.createInstance.String="${metasyntatic}"
uknit.createInstance.Optional=Optional.empty()
uknit.createInstance.Stream=Stream.of(STEPIN)

uknit.createInstance.Iterator=needsIntervention
uknit.createInstance.Entry=needsIntervention

# preferred initializer for array
uknit.createInstance.arrayType={}

# preferred initializer for unmodifiable types
uknit.createInstance.Byte=Byte.valueOf("65")
uknit.createInstance.Short=Short.valueOf("1")
uknit.createInstance.Character=Character.valueOf('A')
uknit.createInstance.Integer=Integer.valueOf(1)
uknit.createInstance.Long=Long.valueOf(1L)
uknit.createInstance.Float=Float.valueOf(1.0f)
uknit.createInstance.Double=Double.valueOf(1.0d)
uknit.createInstance.Boolean=Boolean.valueOf(true)
uknit.createInstance.Class=STEPIN

# preferred initializer for primitives
uknit.createInstance.byte=65
uknit.createInstance.short=1
uknit.createInstance.char='A'
uknit.createInstance.int=1
uknit.createInstance.long=1L
uknit.createInstance.float=1.0f
uknit.createInstance.double=1.0d
uknit.createInstance.boolean=true

# preferred instance for unspecified types
uknit.createInstance.treatDefaultAsMock=true
uknit.createInstance.mock=Mockito.mock(${type}.class)
uknit.createInstance.mockDeep=Mockito.mock(${type}.class, RETURNS_DEEP_STUBS)


# inferred vars
uknit.inferVar.typeNotFound=needsIntervention
uknit.inferVar.returnVar=expected

# by default infer vars use type name as names, below ones use name from uknit.inferVar.name
uknit.inferVar.name.useType.String=false
uknit.inferVar.name.useType.Byte=false
uknit.inferVar.name.useType.Short=false
uknit.inferVar.name.useType.Character=false
uknit.inferVar.name.useType.Integer=false
uknit.inferVar.name.useType.Long=false
uknit.inferVar.name.useType.Float=false
uknit.inferVar.name.useType.Double=false
uknit.inferVar.name.useType.Boolean=false
uknit.inferVar.name.useType.Object=false
uknit.inferVar.name.useType.Optional=false
uknit.inferVar.name.useType.byte=false
uknit.inferVar.name.useType.short=false
uknit.inferVar.name.useType.char=false
uknit.inferVar.name.useType.int=false
uknit.inferVar.name.useType.long=false
uknit.inferVar.name.useType.float=false
uknit.inferVar.name.useType.double=false
uknit.inferVar.name.useType.boolean=false

# when infer var uses type name as name, alias for the type name
uknit.inferVar.name.alias.Class=clz
uknit.inferVar.name.alias.SimpleEntry=entry

# anonymous and lambda
uknit.anonymous.class.capture=true
uknit.anonymous.class.capture.format=%s.capture()
uknit.anonymous.class.capture.create=ArgumentCaptor<%s> %s = ArgumentCaptor.forClass(%s.class);

# if capture is false
uknit.anonymous.class.substitute=any(%s.class)

# test method body statement format

uknit.format.when=when(%s)
uknit.format.when.return=.thenReturn(%s)
uknit.format.call=%s actual = %s.%s(%s);
uknit.format.callVoid=%s.%s(%s);
uknit.format.callConstructor=%s actual = new %s(%s);
uknit.format.verify=verify(%s).%s(%s);

uknit.format.assert.equals=assertEquals(${expected},actual);
uknit.format.assert.arrayEquals=assertArrayEquals(${expected},actual);
uknit.format.assert.same=assertSame(${expected},actual);
uknit.format.assert.boolean=assertTrue(actual);
uknit.format.assert.float=assertEquals(${expected},actual,0);
uknit.format.assert.fail=fail("unable to assert, STEPIN");

# annotation
uknit.annotation.chainCall=answer=Answers.RETURNS_DEEP_STUBS

# java compliance level
uknit.compiler.compliance=1.8
#uknit.compiler.source=1.8 - defaults to the above

# cast
uknit.parameter.cast.changeType=true
uknit.localVar.cast.changeType=true

uknit.pretty.insertLineBreaks=true
