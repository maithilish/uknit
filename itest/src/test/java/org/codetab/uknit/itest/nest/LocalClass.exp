package org.codetab.uknit.itest.nest;

public class LocalClassTest {
    @InjectMocks
    private LocalClass localClass;

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testValidatePhoneNumberIfCurrentNumberLengthIfMyNumber1GetNumberIfMyNumber2GetNumber() {
        String phoneNumber1 = "Foo";
        String phoneNumber2 = "Bar";
        LocalClass.validatePhoneNumber(phoneNumber1, phoneNumber2);
        fail("unable to assert, STEPIN");
    }

    @Test
    public void testValidatePhoneNumberIfCurrentNumberLengthIfMyNumber1GetNumberElseMyNumber2GetNumber() {
        String phoneNumber1 = "Foo";
        String phoneNumber2 = "Bar";
        LocalClass.validatePhoneNumber(phoneNumber1, phoneNumber2);
        fail("unable to assert, STEPIN");
    }

    @Test
    public void testValidatePhoneNumberIfCurrentNumberLengthElseMyNumber1GetNumber() {
        String phoneNumber1 = "Foo";
        String phoneNumber2 = "Bar";
        LocalClass.validatePhoneNumber(phoneNumber1, phoneNumber2);
        fail("unable to assert, STEPIN");
    }

    @Test
    public void testValidatePhoneNumberElseCurrentNumberLength() {
        String phoneNumber1 = "Foo";
        String phoneNumber2 = "Bar";
        LocalClass.validatePhoneNumber(phoneNumber1, phoneNumber2);
        fail("unable to assert, STEPIN");
    }

    @Test
    public void testValidatePhoneNumber() {
        String phoneNumber1 = "Foo";
        String phoneNumber2 = "Bar";
        LocalClass.validatePhoneNumber(phoneNumber1, phoneNumber2);
        fail("unable to assert, STEPIN");
    }

    @Test
    public void testValidatePhoneNumberStringString() {
        String phoneNumber1 = "Foo";
        String phoneNumber2 = "Bar";
        LocalClass.validatePhoneNumber(phoneNumber1, phoneNumber2);
        fail("unable to assert, STEPIN");
    }
}
