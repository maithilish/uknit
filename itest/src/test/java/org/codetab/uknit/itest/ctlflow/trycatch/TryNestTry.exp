package org.codetab.uknit.itest.ctlflow.trycatch;

import org.codetab.uknit.itest.model.Duck;

public class TryNestTryTest {
    @InjectMocks
    private TryNestTry tryNestTry;

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testTryNestTryFooTryTry() {
        Duck duck = Mockito.mock(Duck.class);
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryNestTryFoo(duck);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck).swim("try try");
        verify(duck, never()).swim("try try catch");
        verify(duck).swim("try try finally");
        verify(duck, never()).swim("catch");
        verify(duck).swim("finally");
        verify(duck).swim("end");
    }

    @Test
    public void testTryNestTryFooTryTryCatchIllegalStateException() {
        Duck duck = Mockito.mock(Duck.class);
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryNestTryFoo(duck);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck).swim("try try");
        verify(duck).swim("try try catch");
        verify(duck).swim("try try finally");
        verify(duck, never()).swim("catch");
        verify(duck).swim("finally");
        verify(duck).swim("end");
    }

    @Test
    public void testTryNestTryFooTryCatchIllegalStateException() {
        Duck duck = Mockito.mock(Duck.class);
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryNestTryFoo(duck);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck, never()).swim("try try");
        verify(duck, never()).swim("try try catch");
        verify(duck, never()).swim("try try finally");
        verify(duck).swim("catch");
        verify(duck).swim("finally");
        verify(duck).swim("end");
    }

    @Test
    public void testTryCatchNestTryFooTry() {
        Duck duck = Mockito.mock(Duck.class);
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryCatchNestTryFoo(duck);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck, never()).swim("catch");
        verify(duck, never()).swim("catch try");
        verify(duck, never()).swim("catch catch");
        verify(duck, never()).swim("catch finally");
        verify(duck).swim("finally");
        verify(duck).swim("end");
    }

    @Test
    public void testTryCatchNestTryFooTryCatchIllegalStateExceptionTry() {
        Duck duck = Mockito.mock(Duck.class);
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryCatchNestTryFoo(duck);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck).swim("catch");
        verify(duck).swim("catch try");
        verify(duck, never()).swim("catch catch");
        verify(duck).swim("catch finally");
        verify(duck).swim("finally");
        verify(duck).swim("end");
    }

    @Test
    public void testTryCatchNestTryFooCatchIllegalStateExceptionTryCatchIllegalStateException() {
        Duck duck = Mockito.mock(Duck.class);
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryCatchNestTryFoo(duck);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck).swim("catch");
        verify(duck).swim("catch try");
        verify(duck).swim("catch catch");
        verify(duck).swim("catch finally");
        verify(duck).swim("finally");
        verify(duck).swim("end");
    }

    @Test
    public void testTryFinallyNestTryFooTryTry() {
        Duck duck = Mockito.mock(Duck.class);
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryFinallyNestTryFoo(duck);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck, never()).swim("catch");
        verify(duck).swim("finally");
        verify(duck).swim("finally try");
        verify(duck, never()).swim("finally catch");
        verify(duck).swim("finally finally");
        verify(duck).swim("end");
    }

    @Test
    public void testTryFinallyNestTryFooTryTryCatchIllegalStateException() {
        Duck duck = Mockito.mock(Duck.class);
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryFinallyNestTryFoo(duck);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck, never()).swim("catch");
        verify(duck).swim("finally");
        verify(duck).swim("finally try");
        verify(duck).swim("finally catch");
        verify(duck).swim("finally finally");
        verify(duck).swim("end");
    }

    @Test
    public void testTryFinallyNestTryFooTryCatchIllegalStateExceptionTry() {
        Duck duck = Mockito.mock(Duck.class);
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryFinallyNestTryFoo(duck);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck).swim("catch");
        verify(duck).swim("finally");
        verify(duck).swim("finally try");
        verify(duck, never()).swim("finally catch");
        verify(duck).swim("finally finally");
        verify(duck).swim("end");
    }

    @Test
    public void testTryNestTryPlusIfFooTryTryIfCanSwim() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryNestTryPlusIfFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck).swim("try try");
        verify(duck, never()).swim("try try catch");
        verify(duck).swim("try try finally");
        verify(duck, never()).swim("catch");
        verify(duck).swim("finally");
        verify(duck).swim("if");
        verify(duck, never()).swim("else");
        verify(duck).swim("end");
    }

    @Test
    public void testTryNestTryPlusIfFooTryTryElseCanSwim() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryNestTryPlusIfFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck).swim("try try");
        verify(duck, never()).swim("try try catch");
        verify(duck).swim("try try finally");
        verify(duck, never()).swim("catch");
        verify(duck).swim("finally");
        verify(duck, never()).swim("if");
        verify(duck).swim("else");
        verify(duck).swim("end");
    }

    @Test
    public void testTryNestTryPlusIfFooTryTryCatchIllegalStateException() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryNestTryPlusIfFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck).swim("try try");
        verify(duck).swim("try try catch");
        verify(duck).swim("try try finally");
        verify(duck, never()).swim("catch");
        verify(duck).swim("finally");
        verify(duck).swim("if");
        verify(duck, never()).swim("else");
        verify(duck).swim("end");
    }

    @Test
    public void testTryNestTryPlusIfFooTryCatchIllegalStateException() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryNestTryPlusIfFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck, never()).swim("try try");
        verify(duck, never()).swim("try try catch");
        verify(duck, never()).swim("try try finally");
        verify(duck).swim("catch");
        verify(duck).swim("finally");
        verify(duck).swim("if");
        verify(duck, never()).swim("else");
        verify(duck).swim("end");
    }

    @Test
    public void testTryCatchNestTryPlusIfFooTryIfCanSwim() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryCatchNestTryPlusIfFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck, never()).swim("catch");
        verify(duck, never()).swim("catch try");
        verify(duck, never()).swim("catch catch");
        verify(duck, never()).swim("catch finally");
        verify(duck).swim("finally");
        verify(duck).swim("if");
        verify(duck, never()).swim("else");
        verify(duck).swim("end");
    }

    @Test
    public void testTryCatchNestTryPlusIfFooTryElseCanSwim() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryCatchNestTryPlusIfFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck, never()).swim("catch");
        verify(duck, never()).swim("catch try");
        verify(duck, never()).swim("catch catch");
        verify(duck, never()).swim("catch finally");
        verify(duck).swim("finally");
        verify(duck, never()).swim("if");
        verify(duck).swim("else");
        verify(duck).swim("end");
    }

    @Test
    public void testTryCatchNestTryPlusIfFooTryCatchIllegalStateExceptionTry() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryCatchNestTryPlusIfFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck).swim("catch");
        verify(duck).swim("catch try");
        verify(duck, never()).swim("catch catch");
        verify(duck).swim("catch finally");
        verify(duck).swim("finally");
        verify(duck).swim("if");
        verify(duck, never()).swim("else");
        verify(duck).swim("end");
    }

    @Test
    public void testTryCatchNestTryPlusIfFooCatchIllegalStateExceptionTryCatchIllegalStateException() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryCatchNestTryPlusIfFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck).swim("catch");
        verify(duck).swim("catch try");
        verify(duck).swim("catch catch");
        verify(duck).swim("catch finally");
        verify(duck).swim("finally");
        verify(duck).swim("if");
        verify(duck, never()).swim("else");
        verify(duck).swim("end");
    }

    @Test
    public void testTryFinallyNestTryPlusIfFooTryTryIfCanSwim() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryFinallyNestTryPlusIfFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck, never()).swim("catch");
        verify(duck).swim("finally");
        verify(duck).swim("finally try");
        verify(duck, never()).swim("finally catch");
        verify(duck).swim("finally finally");
        verify(duck).swim("if");
        verify(duck, never()).swim("else");
        verify(duck).swim("end");
    }

    @Test
    public void testTryFinallyNestTryPlusIfFooTryTryElseCanSwim() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryFinallyNestTryPlusIfFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck, never()).swim("catch");
        verify(duck).swim("finally");
        verify(duck).swim("finally try");
        verify(duck, never()).swim("finally catch");
        verify(duck).swim("finally finally");
        verify(duck, never()).swim("if");
        verify(duck).swim("else");
        verify(duck).swim("end");
    }

    @Test
    public void testTryFinallyNestTryPlusIfFooTryTryCatchIllegalStateException() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryFinallyNestTryPlusIfFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck, never()).swim("catch");
        verify(duck).swim("finally");
        verify(duck).swim("finally try");
        verify(duck).swim("finally catch");
        verify(duck).swim("finally finally");
        verify(duck).swim("if");
        verify(duck, never()).swim("else");
        verify(duck).swim("end");
    }

    @Test
    public void testTryFinallyNestTryPlusIfFooTryCatchIllegalStateExceptionTry() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestTry.tryFinallyNestTryPlusIfFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck).swim("catch");
        verify(duck).swim("finally");
        verify(duck).swim("finally try");
        verify(duck, never()).swim("finally catch");
        verify(duck).swim("finally finally");
        verify(duck).swim("if");
        verify(duck, never()).swim("else");
        verify(duck).swim("end");
    }
}
