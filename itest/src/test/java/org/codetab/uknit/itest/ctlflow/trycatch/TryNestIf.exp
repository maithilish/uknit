package org.codetab.uknit.itest.ctlflow.trycatch;

import org.codetab.uknit.itest.model.Duck;

public class TryNestIfTest {
    @InjectMocks
    private TryNestIf tryNestIf;

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testIfNestTryFooIfCanSwimTry() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestIf.ifNestTryFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck).swim("if try");
        verify(duck, never()).swim("if catch");
        verify(duck).swim("if finally");
        verify(duck, never()).swim("else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfNestTryFooIfCanSwimTryCatchIllegalStateException() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestIf.ifNestTryFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("if");
        verify(duck).swim("if try");
        verify(duck).swim("if catch");
        verify(duck).swim("if finally");
        verify(duck, never()).swim("else");
        verify(duck).swim("end");
    }

    @Test
    public void testIfNestTryFooElseCanSwim() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestIf.ifNestTryFoo(duck, canSwim);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck, never()).swim("if");
        verify(duck, never()).swim("if try");
        verify(duck, never()).swim("if catch");
        verify(duck, never()).swim("if finally");
        verify(duck).swim("else");
        verify(duck).swim("end");
    }

    @Test
    public void testTryNestIfFooTryIfCanSwimIfDone() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean done = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestIf.tryNestIfFoo(duck, canSwim, done);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck).swim("try if");
        verify(duck).swim("try if if");
        verify(duck, never()).swim("try if else");
        verify(duck, never()).swim("try else");
        verify(duck, never()).swim("catch");
        verify(duck).swim("finally");
        verify(duck).swim("end");
    }

    @Test
    public void testTryNestIfFooTryIfCanSwimElseDone() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean done = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestIf.tryNestIfFoo(duck, canSwim, done);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck).swim("try if");
        verify(duck, never()).swim("try if if");
        verify(duck).swim("try if else");
        verify(duck, never()).swim("try else");
        verify(duck, never()).swim("catch");
        verify(duck).swim("finally");
        verify(duck).swim("end");
    }

    @Test
    public void testTryNestIfFooTryElseCanSwim() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean done = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestIf.tryNestIfFoo(duck, canSwim, done);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck, never()).swim("try if");
        verify(duck, never()).swim("try if if");
        verify(duck, never()).swim("try if else");
        verify(duck).swim("try else");
        verify(duck, never()).swim("catch");
        verify(duck).swim("finally");
        verify(duck).swim("end");
    }

    @Test
    public void testTryNestIfFooTryCatchIllegalStateException() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean done = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestIf.tryNestIfFoo(duck, canSwim, done);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck, never()).swim("try if");
        verify(duck, never()).swim("try if if");
        verify(duck, never()).swim("try if else");
        verify(duck, never()).swim("try else");
        verify(duck).swim("catch");
        verify(duck).swim("finally");
        verify(duck).swim("end");
    }

    @Test
    public void testTryCatchNestIfFooTry() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean done = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestIf.tryCatchNestIfFoo(duck, canSwim, done);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck, never()).swim("catch");
        verify(duck, never()).swim("catch if");
        verify(duck, never()).swim("catch if if");
        verify(duck, never()).swim("catch if else");
        verify(duck, never()).swim("catch else");
        verify(duck).swim("finally");
        verify(duck).swim("end");
    }

    @Test
    public void testTryCatchNestIfFooCatchIllegalStateExceptionIfCanSwimIfDone() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean done = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestIf.tryCatchNestIfFoo(duck, canSwim, done);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck).swim("catch");
        verify(duck).swim("catch if");
        verify(duck).swim("catch if if");
        verify(duck, never()).swim("catch if else");
        verify(duck, never()).swim("catch else");
        verify(duck).swim("finally");
        verify(duck).swim("end");
    }

    @Test
    public void testTryCatchNestIfFooCatchIllegalStateExceptionIfCanSwimElseDone() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean done = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestIf.tryCatchNestIfFoo(duck, canSwim, done);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck).swim("catch");
        verify(duck).swim("catch if");
        verify(duck, never()).swim("catch if if");
        verify(duck).swim("catch if else");
        verify(duck, never()).swim("catch else");
        verify(duck).swim("finally");
        verify(duck).swim("end");
    }

    @Test
    public void testTryCatchNestIfFooTryCatchIllegalStateExceptionElseCanSwim() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean done = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestIf.tryCatchNestIfFoo(duck, canSwim, done);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck).swim("catch");
        verify(duck, never()).swim("catch if");
        verify(duck, never()).swim("catch if if");
        verify(duck, never()).swim("catch if else");
        verify(duck).swim("catch else");
        verify(duck).swim("finally");
        verify(duck).swim("end");
    }

    @Test
    public void testTryFinallyNestIfFooTryIfCanSwimIfDone() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean done = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestIf.tryFinallyNestIfFoo(duck, canSwim, done);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck, never()).swim("catch");
        verify(duck).swim("finally");
        verify(duck).swim("finally if");
        verify(duck).swim("finally if if");
        verify(duck, never()).swim("finally if else");
        verify(duck, never()).swim("finally else");
        verify(duck).swim("end");
    }

    @Test
    public void testTryFinallyNestIfFooTryIfCanSwimElseDone() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean done = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestIf.tryFinallyNestIfFoo(duck, canSwim, done);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck, never()).swim("catch");
        verify(duck).swim("finally");
        verify(duck).swim("finally if");
        verify(duck, never()).swim("finally if if");
        verify(duck).swim("finally if else");
        verify(duck, never()).swim("finally else");
        verify(duck).swim("end");
    }

    @Test
    public void testTryFinallyNestIfFooTryElseCanSwim() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean done = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestIf.tryFinallyNestIfFoo(duck, canSwim, done);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck, never()).swim("catch");
        verify(duck).swim("finally");
        verify(duck, never()).swim("finally if");
        verify(duck, never()).swim("finally if if");
        verify(duck, never()).swim("finally if else");
        verify(duck).swim("finally else");
        verify(duck).swim("end");
    }

    @Test
    public void testTryFinallyNestIfFooTryCatchIllegalStateException() {
        Duck duck = Mockito.mock(Duck.class);
        boolean canSwim = true;
        boolean done = true;
        String apple = "Foo";

        when(duck.toString()).thenReturn(apple);

        String actual = tryNestIf.tryFinallyNestIfFoo(duck, canSwim, done);

        assertEquals(apple, actual);
        verify(duck).swim("start");
        verify(duck).swim("try");
        verify(duck).swim("catch");
        verify(duck).swim("finally");
        verify(duck).swim("finally if");
        verify(duck).swim("finally if if");
        verify(duck, never()).swim("finally if else");
        verify(duck, never()).swim("finally else");
        verify(duck).swim("end");
    }
}
